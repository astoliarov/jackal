// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/astoliarov/jackal/pkg/interfaces (interfaces: IDownloadAndCropImageUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	interfaces "github.com/astoliarov/jackal/pkg/interfaces"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIDownloadAndCropImageUseCase is a mock of IDownloadAndCropImageUseCase interface
type MockIDownloadAndCropImageUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIDownloadAndCropImageUseCaseMockRecorder
}

// MockIDownloadAndCropImageUseCaseMockRecorder is the mock recorder for MockIDownloadAndCropImageUseCase
type MockIDownloadAndCropImageUseCaseMockRecorder struct {
	mock *MockIDownloadAndCropImageUseCase
}

// NewMockIDownloadAndCropImageUseCase creates a new mock instance
func NewMockIDownloadAndCropImageUseCase(ctrl *gomock.Controller) *MockIDownloadAndCropImageUseCase {
	mock := &MockIDownloadAndCropImageUseCase{ctrl: ctrl}
	mock.recorder = &MockIDownloadAndCropImageUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDownloadAndCropImageUseCase) EXPECT() *MockIDownloadAndCropImageUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockIDownloadAndCropImageUseCase) Execute(arg0 string, arg1, arg2 int, arg3 interfaces.CropType) ([]byte, string, error) {
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute
func (mr *MockIDownloadAndCropImageUseCaseMockRecorder) Execute(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIDownloadAndCropImageUseCase)(nil).Execute), arg0, arg1, arg2, arg3)
}
